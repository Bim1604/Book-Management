/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dang.bookview;

import dang.bookdao.BookDAO;
import dang.bookdto.BookDTO;
import dang.bookvalid.BookValid;
import dang.logger.Log;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class BookGUI extends javax.swing.JFrame {

    BookDAO bookList;
    BookFullModel bookFullModel;
    BookTempModel bookTempModel;
    boolean addNewBook = false;
    boolean findBook = false;
    Log log;

    /**
     * Creates new form BookGUI
     */
    public BookGUI() {
        initComponents();
        bookList = new BookDAO();
        bookFullModel = new BookFullModel(bookList);
        bookList.loadDB();
        tblBook.setModel(bookFullModel);
        btnAddNew.setEnabled(true);
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
        loadComboBox();
        try {
            log = new Log("log.txt");
        } catch (SecurityException | IOException ex) {
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe(ex.getMessage());
        }
    }

//    public void getModel(){
//        cbPublishedYear.setModel((ComboBoxModel<String>) listYear());
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBook = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cbSort = new javax.swing.JComboBox<>();
        btnSearchByName = new javax.swing.JButton();
        txtSearchbyName = new javax.swing.JTextField();
        btnGetAllBook = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        txtBookName = new javax.swing.JTextField();
        btnFindByID = new javax.swing.JButton();
        txtAuthor = new javax.swing.JTextField();
        txtPushlisher = new javax.swing.JTextField();
        cbPublishedYear = new javax.swing.JComboBox<>();
        ckForRent = new javax.swing.JCheckBox();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Main part:"));

        tblBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBook);

        jLabel2.setText("Sort by name:");

        cbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        cbSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSortActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search by name");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        btnGetAllBook.setText("Get all book");
        btnGetAllBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(btnSearchByName)
                .addGap(18, 18, 18)
                .addComponent(txtSearchbyName)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addComponent(btnGetAllBook)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName)
                    .addComponent(txtSearchbyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(btnGetAllBook)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Detailed part:"));

        jLabel3.setText("Book ID:");

        jLabel4.setText("Book Name:");

        jLabel5.setText("Author:");

        jLabel6.setText("Publisher:");

        jLabel7.setText("Published year:");

        btnFindByID.setText("Find by ID");
        btnFindByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByIDActionPerformed(evt);
            }
        });

        cbPublishedYear.setToolTipText("");

        ckForRent.setText("For rent");

        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(ckForRent)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnAddNew)
                        .addGap(51, 51, 51)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(btnRemove))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtBookID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFindByID))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cbPublishedYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtBookName)
                            .addComponent(txtAuthor)
                            .addComponent(txtPushlisher))))
                .addGap(36, 36, 36))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFindByID)))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtPushlisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cbPublishedYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ckForRent)
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnSave)
                    .addComponent(btnRemove))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Book Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void clearTextField() {
        txtBookID.setText("");
        txtBookName.setText("");
        txtAuthor.setText("");
        txtPushlisher.setText("");
        cbPublishedYear.setSelectedIndex(0);
        ckForRent.setSelected(false);
    }
    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        clearTextField();
        addNewBook = true;
        btnSave.setEnabled(true);
        btnRemove.setEnabled(false);
    }//GEN-LAST:event_btnAddNewActionPerformed
    public BookDTO getTextField() {
        String bookID = txtBookID.getText();
        String bookName = txtBookName.getText();
        String author = txtAuthor.getText();
        String publisher = txtPushlisher.getText();
        int publishedYear = Integer.parseInt((String) cbPublishedYear.getSelectedItem().toString().trim());
        boolean forRent = ckForRent.isSelected();
        BookDTO dto = new BookDTO(bookID, bookName, author, publisher, publishedYear, forRent);
        return dto;
    }

    public boolean checkValid(BookDTO dto) {
        BookValid valid = new BookValid();
        if (!valid.checkBookID(dto.getBookID())) {
            JOptionPane.showMessageDialog(this, "Invalid Book ID");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Book ID");
            return false;
        }
        if (!valid.checkBookName(dto.getBookName())) {
            JOptionPane.showMessageDialog(this, "Invalid Book Name");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Book Name");
            return false;
        }
        if (!valid.checkAuthor(dto.getAuthor())) {
            JOptionPane.showMessageDialog(this, "Invalid Author");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Author");
            return false;
        }
        if (!valid.checkPublisher(dto.getPublisher())) {
            JOptionPane.showMessageDialog(this, "Invalid Publisher");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Invalid Publisher");
            return false;
        }
        if (!valid.checkPublishedYear(dto.getPublishedYear())) {
            JOptionPane.showMessageDialog(this, "Year must be less than current year");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Year must be less than current year");
            return false;
        }
        return true;
    }

    public final ArrayList<Integer> listYear() {
        ArrayList<Integer> listYear = new ArrayList<>();
        for (int i = LocalDateTime.now().getYear(); i >= 1980; i--) {
            listYear.add(i);
        }
        return listYear;
    }

    public void resetButton() {
        btnAddNew.setEnabled(true);
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
        txtBookID.setEditable(true);
    }
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        BookDTO dto = getTextField();
        boolean checkValid = checkValid(dto);
        if (!checkValid) {
            return;
        }
        if (addNewBook) {
            boolean createBook = bookList.createBook(dto);
            if (createBook) {
                refreshTable();
                resetButton();
                clearTextField();
                findBook = false;
                JOptionPane.showMessageDialog(this, "Data save");
            } else {
                JOptionPane.showMessageDialog(this, "DuplicateID");
                Log.logger.setLevel(Level.SEVERE);
                Log.logger.severe("DuplicateID");
            }
        } else {
            boolean updateBook = bookList.updateBook(dto);
            if (updateBook) {
                refreshTable();
                resetButton();
                clearTextField();
                findBook = false;
                JOptionPane.showMessageDialog(this, "Date save");
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void tblBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookMouseClicked
        int selectRow = tblBook.getSelectedRow();
        BookDTO dto = bookList.get(selectRow);
        setTextField(dto);
        addNewBook = false;
        setButtonAfterClick();
    }//GEN-LAST:event_tblBookMouseClicked
    public void refreshTable() {
        tblBook.setModel(bookFullModel);
        tblBook.updateUI();
    }

    public void setTempTable() {
        bookTempModel = new BookTempModel(bookList.getTempList());
        tblBook.setModel(bookTempModel);
        tblBook.updateUI();
    }
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int choice = JOptionPane.showConfirmDialog(this, "Do you want to remove this", "Yes/No", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            if (!addNewBook) {
                BookDTO dto = getTextField();
                boolean removeBook = bookList.removeBook(dto);
                if (removeBook) {
                    refreshTable();
                    clearTextField();
                    resetButton();
                    findBook = false;
                    JOptionPane.showMessageDialog(this, "Data save");
                } else {
                    JOptionPane.showMessageDialog(this, "Remove failed");
                    Log.logger.setLevel(Level.SEVERE);
                    Log.logger.severe("Remove failed");
                }
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed
    public void setTextField(BookDTO dto) {
        txtBookID.setText(dto.getBookID());
        txtBookName.setText(dto.getBookName());
        txtAuthor.setText(dto.getAuthor());
        txtPushlisher.setText(dto.getPublisher());
        cbPublishedYear.setSelectedIndex(LocalDateTime.now().getYear() - dto.getPublishedYear());
        ckForRent.setSelected(dto.isForRent());
    }
    private void btnFindByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByIDActionPerformed
        if (!findBook) {
            try {
                String bookID = txtBookID.getText();
                BookDTO dto = bookList.findByID(bookID);
                if (dto != null) {
                    bookList.getTempList().add(dto);
                    setTempTable();
                    setTextField(dto);
                    setButtonAfterClick();
                    findBook = true;
                    addNewBook = false;
                } else {
                    JOptionPane.showMessageDialog(this, "not found");
                    Log.logger.setLevel(Level.SEVERE);
                    Log.logger.severe("not found");
                }
            } catch (NullPointerException e) {
                Log.logger.setLevel(Level.SEVERE);
                Log.logger.severe(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnFindByIDActionPerformed
    public void setButtonAfterClick() {
        txtBookID.setEditable(false);
        btnAddNew.setEnabled(false);
        btnSave.setEnabled(true);
        btnRemove.setEnabled(true);
    }
    private void btnGetAllBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllBookActionPerformed
        refreshTable();
        clearTextField();
        resetButton();
        addNewBook = false;
        findBook = false;
    }//GEN-LAST:event_btnGetAllBookActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        String searchValue = txtSearchbyName.getText();
        boolean searchByName = bookList.findByName(searchValue);
        if (searchByName) {
            setTempTable();
        } else {
            JOptionPane.showMessageDialog(this, "Not Found");
            Log.logger.setLevel(Level.SEVERE);
            Log.logger.severe("Not Found");
        }

    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void cbSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSortActionPerformed
        if (cbSort.getSelectedIndex() == 0) {
            bookList.sortAscendingByBookName();
        } else {
            bookList.sortDescendingByBookName();
        }
        refreshTable();
    }//GEN-LAST:event_cbSortActionPerformed
    public final void loadComboBox() {
        for (Integer integer : listYear()) {
            cbPublishedYear.addItem(integer + "");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnFindByID;
    private javax.swing.JButton btnGetAllBook;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.JComboBox<String> cbPublishedYear;
    private javax.swing.JComboBox<String> cbSort;
    private javax.swing.JCheckBox ckForRent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBook;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtPushlisher;
    private javax.swing.JTextField txtSearchbyName;
    // End of variables declaration//GEN-END:variables
}
